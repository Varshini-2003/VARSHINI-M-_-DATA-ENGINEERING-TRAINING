Section 1: Working with Schemas & Data Types


1.27017> use trainingdb
switched to db trainingdb
3.trainingdb> db.employees.insertMany([
...   {
...     name: "Alice",
...     age: 30,
...     isManager: true,
...     skills: ["MongoDB", "Node.js", "Express"],
...     joiningDate: ISODate("2023-01-10"),
...     profile: { linkedin: "linkedin.com/in/alice", portfolio: "alice.dev" }
...   },
...   {
...     name: "Bob",
...     age: 25,
...     isManager: false,
...     skills: ["HTML", "CSS"],
...     joiningDate: ISODate("2022-05-15"),
...     profile: { linkedin: "linkedin.com/in/bob", portfolio: "bob.dev" }
...   },
...   {
...     name: "Carol",
...     age: 28,
...     isManager: true,
...     skills: ["Python", "Django", "MongoDB", "Flask"],
...     joiningDate: ISODate("2024-03-01"),
...     profile: { linkedin: "linkedin.com/in/carol", portfolio: "carol.dev" }
...   },
...   {
...     name: "Dave",
...     age: 35,
...     isManager: false,
...     skills: ["Java", "Spring"],
...     joiningDate: ISODate("2021-09-20"),
...     profile: { linkedin: "linkedin.com/in/dave", portfolio: "dave.dev" }
...   }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('683152da304cc789656c4bd0'),
    '1': ObjectId('683152da304cc789656c4bd1'),
    '2': ObjectId('683152da304cc789656c4bd2'),
    '3': ObjectId('683152da304cc789656c4bd3')
  }
}

4.trainingdb> db.employees.find({
...   $expr: { $gt: [ { $size: "$skills" }, 2 ] },
...   joiningDate: { $gt: ISODate("2023-01-01") }
... })
[
  {
    _id: ObjectId('683152da304cc789656c4bd0'),
    name: 'Alice',
    age: 30,
    isManager: true,
    skills: [ 'MongoDB', 'Node.js', 'Express' ],
    joiningDate: ISODate('2023-01-10T00:00:00.000Z'),
    profile: { linkedin: 'linkedin.com/in/alice', portfolio: 'alice.dev' }
  },
  {
    _id: ObjectId('683152da304cc789656c4bd2'),
    name: 'Carol',
    age: 28,
    isManager: true,
    skills: [ 'Python', 'Django', 'MongoDB', 'Flask' ],
    joiningDate: ISODate('2024-03-01T00:00:00.000Z'),
    profile: { linkedin: 'linkedin.com/in/carol', portfolio: 'carol.dev' }
  }
]
5.trainingdb> db.employees.updateOne({ name: "Alice" }, { $set: { rating: 4.7 } })
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
trainingdb> db.employees.find({ rating: { $type: "double" } })
[
  {
    _id: ObjectId('683152da304cc789656c4bd0'),
    name: 'Alice',
    age: 30,
    isManager: true,
    skills: [ 'MongoDB', 'Node.js', 'Express' ],
    joiningDate: ISODate('2023-01-10T00:00:00.000Z'),
    profile: { linkedin: 'linkedin.com/in/alice', portfolio: 'alice.dev' },
    rating: 4.7
  }
]
trainingdb> db.employees.find({}, { _id: 0, name: 1, skills: 1 })
[
  { name: 'Alice', skills: [ 'MongoDB', 'Node.js', 'Express' ] },
  { name: 'Bob', skills: [ 'HTML', 'CSS' ] },
  { name: 'Carol', skills: [ 'Python', 'Django', 'MongoDB', 'Flask' ] },
  { name: 'Dave', skills: [ 'Java', 'Spring' ] }
]


Section 2: One-to-One (Embedded)

1.trainingdb> use schooldb
switched to db schooldb
schooldb> db.students.insertMany([
...   {
...     name: "Emma",
...     guardian: { name: "Sarah", phone: "1234567890", relation: "Mother" }
...   },
...   {
...     name: "Liam",
...     guardian: { name: "John", phone: "2345678901", relation: "Father" }
...   },
...   {
...     name: "Sophia",
...     guardian: { name: "Linda", phone: "3456789012", relation: "Mother" }
...   }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('683155b1304cc789656c4bd4'),
    '1': ObjectId('683155b1304cc789656c4bd5'),
    '2': ObjectId('683155b1304cc789656c4bd6')
  }
}
3.schooldb> db.students.find({ "guardian.relation": "Mother" })
[
  {
    _id: ObjectId('683155b1304cc789656c4bd4'),
    name: 'Emma',
    guardian: { name: 'Sarah', phone: '1234567890', relation: 'Mother' }
  },
  {
    _id: ObjectId('683155b1304cc789656c4bd6'),
    name: 'Sophia',
    guardian: { name: 'Linda', phone: '3456789012', relation: 'Mother' }
  }
]
4.schooldb> db.students.updateOne({ name: "Emma" }, { $set: { "guardian.phone": "9876543210" } })
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}


Section 3: One-to-Many (Embedded)



1.schooldb> db.teachers.insertMany([
...   { name: "Mr. Smith", classes: ["Math", "Physics"] },
...   { name: "Ms. Johnson", classes: ["Biology", "Chemistry"] },
...   { name: "Dr. Adams", classes: ["Physics", "Computer Science"] }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('683156a1304cc789656c4bd7'),
    '1': ObjectId('683156a1304cc789656c4bd8'),
    '2': ObjectId('683156a1304cc789656c4bd9')
  }
}
3.schooldb> db.teachers.find({ classes: "Physics" })
[
  {
    _id: ObjectId('683156a1304cc789656c4bd7'),
    name: 'Mr. Smith',
    classes: [ 'Math', 'Physics' ]
  },
  {
    _id: ObjectId('683156a1304cc789656c4bd9'),
    name: 'Dr. Adams',
    classes: [ 'Physics', 'Computer Science' ]
  }
]
4.schooldb> db.teachers.updateOne({ name: "Mr. Smith" }, { $push: { classes: "Robotics" } })
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
5.schooldb> db.teachers.updateOne({ name: "Mr. Smith" }, { $pull: { classes: "Math" } })
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}


Section 4: One-to-Many (Referenced)

1.schooldb> use academia
switched to db academia
academia> db.courses.insertMany([
...   { _id: ObjectId("665077a962eb72a23fa5b001"), title: "Machine Learning", credits: 4 },
...   { _id: ObjectId("665077a962eb72a23fa5b002"), title: "Data Structures", credits: 3 }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('665077a962eb72a23fa5b001'),
    '1': ObjectId('665077a962eb72a23fa5b002')
  }
}
3.academia> db.students.insertMany([
...   { name: "Arjun", enrolledCourse: ObjectId("665077a962eb72a23fa5b001") },
...   { name: "Maya", enrolledCourse: ObjectId("665077a962eb72a23fa5b002") }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('68315ac3304cc789656c4bda'),
    '1': ObjectId('68315ac3304cc789656c4bdb')
  }
}
4.academia> db.students.find({ enrolledCourse: ObjectId("665077a962eb72a23fa5b001") })
[
  {
    _id: ObjectId('68315ac3304cc789656c4bda'),
    name: 'Arjun',
    enrolledCourse: ObjectId('665077a962eb72a23fa5b001')
  }
]
5.academia> db.courses.find({ _id: ObjectId("665077a962eb72a23fa5b001") })
[
  {
    _id: ObjectId('665077a962eb72a23fa5b001'),
    title: 'Machine Learning',
    credits: 4
  }
]



Section 5: $lookup (Join in Aggregation)





1.academia> db.students.aggregate([
...   {
...     $lookup: {
...       from: "courses",
...       localField: "enrolledCourse",
...       foreignField: "_id",
...       as: "courseDetails"
...     }
...   }
... ])
[
  {
    _id: ObjectId('68315ac3304cc789656c4bda'),
    name: 'Arjun',
    enrolledCourse: ObjectId('665077a962eb72a23fa5b001'),
    courseDetails: [
      {
        _id: ObjectId('665077a962eb72a23fa5b001'),
        title: 'Machine Learning',
        credits: 4
      }
    ]
  },
  {
    _id: ObjectId('68315ac3304cc789656c4bdb'),
    name: 'Maya',
    enrolledCourse: ObjectId('665077a962eb72a23fa5b002'),
    courseDetails: [
      {
        _id: ObjectId('665077a962eb72a23fa5b002'),
        title: 'Data Structures',
        credits: 3
      }
    ]
  }
]
3.academia> db.students.aggregate([
...   {
...     $lookup: {
...       from: "courses",
...       localField: "enrolledCourse",
...       foreignField: "_id",
...       as: "courseDetails"
...     }
...   },
...   {
...     $project: {
...       name: 1,
...       courseTitle: { $arrayElemAt: ["$courseDetails.title", 0] }
...     }
...   }
... ])
[
  {
    _id: ObjectId('68315ac3304cc789656c4bda'),
    name: 'Arjun',
    courseTitle: 'Machine Learning'
  },
  {
    _id: ObjectId('68315ac3304cc789656c4bdb'),
    name: 'Maya',
    courseTitle: 'Data Structures'
  }
]
4.academia> db.students.aggregate([
...   {
...     $lookup: {
...       from: "courses",
...       localField: "enrolledCourse",
...       foreignField: "_id",
...       as: "courseDetails"
...     }
...   },
...   {
...     $match: {
...       "courseDetails.title": "Machine Learning"
...     }
...   },
...   {
...     $project: {
...       name: 1,
...       courseTitle: { $arrayElemAt: ["$courseDetails.title", 0] }
...     }
...   }
... ])
[
  {
    _id: ObjectId('68315ac3304cc789656c4bda'),
    name: 'Arjun',
    courseTitle: 'Machine Learning'
  }
]




























































































































































































































































































































